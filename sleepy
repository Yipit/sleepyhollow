#!/bin/bash
#
# Handy script that cleans up the project folder, re-initializes the
# build system, compiles everything and runs the tests for us.

export DYLD_LIBRARY_PATH=$(pwd)/python/.libs:$(pwd)/lib/.libs
export LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH
export PYTHONPATH=$DYLD_LIBRARY_PATH:$(pwd)/python:$(pwd):$PYTHONPATH

SHOULD_CLEANUP="yes"
NON_VERBOSE="yes"
export SERVER_PID=""
SERVER_NAME=sleepyhollowtestserver
color.yellow (){
    printf "\033[1;33m$1\033[0m"
}
color.red (){
    printf "\033[1;31m$1\033[0m"
}
color.green (){
    printf "\033[1;32m$1\033[0m"
}
color.white (){
    printf "\033[1;37m$1\033[0m"
}
color.blue (){
    printf "\033[1;36m$1\033[0m"
}

check.last_modified () {
    if [ ! -e $1 ]; then
        return 1;
    fi;
    lm=`stat -f"%m" $1`
    lc=`stat -f"%c" $1`
    lB=`stat -f"%B" $1`
    echo $((lm + la + lc + lB))
}

check.last_modified_from_list_of_files () {
    last_date=0
    files=$1
    for file in $files; do
        dt=$(check.last_modified $file)
        if [ $((dt + 0)) -gt $((last_date + 0)) ]; then
            last_date=$((dt));
        fi;
    done
    echo $last_date

}
check.newest_modified_compiled_library () {
    files="tests/sleepyhollow.py tests/_sleepyhollow.so"
    check.last_modified_from_list_of_files $files
}

check.newest_modified_sources () {
    files=`find . -name '*.cpp' -or -name '*.h' -or -name '*.am'`
    check.last_modified_from_list_of_files $files
}

should.recompile_sources () {
    # last_source_string=$(check.newest_modified_sources)
    # last_binary_string=$(check.newest_modified_compiled_library)

    # last_binary=$((last_binary_string + 0))
    # last_source=$((last_source_string + 0))

    # if [ $((last_binary + 0)) -lt $((last_source + 0)) ]; then
    #     echo "yes";
    # else
    #     echo "no";
    # fi;
    echo "no"
}
show.broken () {
    color.red 'dP                         dP                         \n'
    color.red '88                         88                         \n'
    color.red '88d888b. 88d888b. .d8888b. 88  .dP  .d8888b. 88d888b. \n'
    color.red '88`  `88 88`  `88 88`  `88 88888"   88ooood8 88`  `88 \n'
    color.red '88.  .88 88       88.  .88 88  `8b. 88.  ... 88    88 \n'
    color.red '88Y8888` dP       `88888P` dP   `YP `88888P` dP    dP \n'
}
echo.nonverbose () {
    if [ "$NON_VERBOSE" == 'yes' ]; then
        echo $*
    fi;
}

show.logo () {
    color.yellow '   d888888o.   8 8888         8 8888888888   8 8888888888   8 888888888o  `8.`8888.      ,8'"'"'\n'
    color.yellow ' .`8888:'"'"' `88. 8 8888         8 8888         8 8888         8 8888    `88. `8.`8888.    ,8'"'"'\n'
    color.yellow ' 8.`8888.   Y8 8 8888         8 8888         8 8888         8 8888     `88  `8.`8888.  ,8'"'"'\n'
    color.yellow ' `8.`8888.     8 8888         8 8888         8 8888         8 8888     ,88   `8.`8888.,8'"'"'\n'
    color.yellow '  `8.`8888.    8 8888         8 888888888888 8 888888888888 8 8888.   ,88'"'"'    `8.`88888'"'"'\n'
    color.yellow '   `8.`8888.   8 8888         8 8888         8 8888         8 888888888P'"'"'      `8. 8888\n'
    color.yellow '    `8.`8888.  8 8888         8 8888         8 8888         8 8888              `8 8888\n'
    color.yellow '8b   `8.`8888. 8 8888         8 8888         8 8888         8 8888               8 8888\n'
    color.yellow '`8b.  ;8.`8888 8 8888         8 8888         8 8888         8 8888               8 8888\n'
    color.yellow ' `Y8888P ,88P'"'"' 8 888888888888 8 888888888888 8 888888888888 8 8888               8 8888\n'
    echo
    color.red '8 8888        8     ,o888888o.     8 8888         8 8888         ,o888888o.  `8.`888b                 ,8'"'"'\n'
    color.red '8 8888        8  . 8888     `88.   8 8888         8 8888      . 8888     `88. `8.`888b               ,8'"'"'\n'
    color.red '8 8888        8 ,8 8888       `8b  8 8888         8 8888     ,8 8888       `8b `8.`888b             ,8'"'"'\n'
    color.red '8 8888        8 88 8888        `8b 8 8888         8 8888     88 8888        `8b `8.`888b     .b    ,8'"'"'\n'
    color.red '8 8888        8 88 8888         88 8 8888         8 8888     88 8888         88  `8.`888b    88b  ,8'"'"'\n'
    color.red '8 8888        8 88 8888         88 8 8888         8 8888     88 8888         88   `8.`888b .`888b,8'"'"'\n'
    color.red '8 8888888888888 88 8888        ,8P 8 8888         8 8888     88 8888        ,8P    `8.`888b8.`8888'"'"'\n'
    color.red '8 8888        8 `8 8888       ,8P  8 8888         8 8888     `8 8888       ,8P      `8.`888`8.`88'"'"'\n'
    color.red '8 8888        8  ` 8888     ,88'"'"'   8 8888         8 8888      ` 8888     ,88'"'"'        `8.`8'"'"' `8,`'"'"'\n'
    color.red '8 8888        8     `8888888P'"'"'     8 888888888888 8 888888888888 `8888888P'"'"'           `8.`   `8'"'"'\n'
    echo
    echo
}

set-verbose () {
    export NON_VERBOSE="no"
}
cleanup () {
    color.blue "Cleaning up... "
    # Cleanup
    > .gitignore
    git clean -qdf
    git checkout .gitignore
    rm -f tests/*.{dylib,so} tests/sleepyhollow.py
    color.green "OK\n"
}

continuous-integration () {
    if [ ! -e `which virtualenvwrapper.sh` ]; then
        show.broken
        exit 1
    fi;
    cleanup
    compile
    source `which virtualenvwrapper.sh`
    mkvirtualenv --distribute --no-site-packages sleepy-hollow
    pip install -r requirements.pip
    tests
    exit $?
}

compile () {
    # Compilation
    cleanup > sleepy.log

    if [ "$NON_VERBOSE" == 'yes' ]; then
        printf "Preparing to compile..."
        (./autogen.sh 2>&1) 2>&1>> sleepy.log
    else
        ./autogen.sh
    fi;
    if [ "$?" != "0" ]; then
        echo
        cat sleepy.log
    else
        echo.nonverbose "OK"
    fi;
    if [ "$NON_VERBOSE" == 'yes' ]; then
        printf "Compiling sleepy hollow..."
        (make 2>&1) 2>&1>> sleepy.log
    else
        make
    fi;
    if [ "$?" != "0" ]; then
        echo
        cat sleepy.log
    else
        echo.nonverbose "OK"
    fi;
}

server.start () {
    export TEST_SERVER_PORT=5000
    color.blue "Running test server at port "
    color.green "$TEST_SERVER_PORT\n"

    (exec -a $SERVER_NAME python tests/server/__init__.py $TEST_SERVER_PORT 2>&1) 2>&1> server.log &
}
server.stop () {
    unset DYLD_LIBRARY_PATH
    unset LD_LIBRARY_PATH
    unset PYTHONPATH
    ps aux | egrep $SERVER_NAME | grep -v grep | awk '{ print $2 }' | xargs kill -9
    color.blue "Test server stopped\n"
}

tests () {
    server.start
    # Making it easier to run the tests
    if [ $(should.recompile_sources) == "yes" ]; then
        compile
    else
        (make 2>&1) 2>&1 >>sleepy.log
    fi;
    if [ "$?" != "0" ]; then
        exit 1;
    fi;

    # Running the tests
    if [ "x$DISPLAY" == "x" ]; then
        xvfb-run --server-args="-screen 0 1024x768x24" nosetests --verbosity=2 -s tests
    else
        nosetests --verbosity=2 -s tests
    fi

    exit_status="$?"

    server.stop
    exit $exit_status
}

shell () {
    cp -f lib/.libs/*.dylib tests
    cp -f python/.libs/*.so tests
    ipython
}

show-help () {
    echo "USAGE: $0 [optional arguments]"
    echo
    echo "arguments:"
    echo "  --verbose/-v activates verbose mode"
    echo "      EXAMPLES:"
    echo "          ./sleepy --verbose test"
    echo "          ./sleepy -v compile"
    echo
    echo "  test/-t - runs the tests"
    echo "      EXAMPLES:"
    echo "          ./sleepy test"
    echo "          ./sleepy -t"
    echo
    echo "  sneeze/clean/cleanup/-s - clean up files generated by compilation or test steps"
    echo "      EXAMPLES:"
    echo "          ./sleepy sneeze"
    echo "          ./sleepy -s"
    echo
    echo "  compile/-c - compile sleepy hollow"
    echo "      EXAMPLES:"
    echo "          ./sleepy compile"
    echo "          ./sleepy -c"
    echo
    echo "  shell - runs an interactive shell with sleepy hollow enabled"
    echo "      EXAMPLES:"
    echo "          ./sleepy shell"
    echo "  distribute/-d/dist - compile sleepy hollow and prepare it for a release"
    echo "      EXAMPLES:"
    echo "          ./sleepy dist"
    echo "          ./sleepy -d"
    echo "          ./sleepy distribute"
    echo
    echo "  server [port] - runs the builtin test server on the given port (defaults to 4000 if no port is provided)"
    echo "      EXAMPLES:"
    echo "          ./sleepy server 8080"
    echo "          ./sleepy server"
    echo
    echo "  ci/continuous-integration - run the tests aimed on continuous integration (i.e.: jenkins)"
    echo "      EXAMPLES:"
    echo "          ./sleepy ci"
    echo "          ./sleepy continuous-integration"
    echo

}

distribute () {
    # preparing for distribution
    compile
    mkdir -p dist
    printf "Preparing for distribution..."
    cp -f lib/.libs/*.dylib dist
    cp -f python/.libs/*.so dist
    echo "OK"
    echo
    echo "Sleepy hollow files are available under `pwd`/dist"
}

server () {
    python tests/server/__init__.py $1
}

all () {
    if [ "x$1" != "x" ];then
        printf "\033[1;31m"
        echo
        echo "Invalid argument: $*"
        echo
        printf "\033[0m"
        show-help
        exit 1
    fi;
    cleanup
    compile
    tests
}

if [ "$0" != "-bash" ]; then
    while [ "$1" ]; do
        case $1 in
            "-t" | "test") show.logo;tests;exit $?;;
            "-v" | "--verbose") set-verbose;;
            "-s" | "sneeze" | "clean" | "cleanup") cleanup;;
            "shell") shell;;
            "-d" | "distribute" | "dist") show.logo;distribute;exit $?;;
            "server") show.logo;server $2;;
            "-c" | "compile") show.logo;compile ;exit $?;;
            "ci" | "continuous-integration") show.logo;continuous-integration ;exit $?;;
            "-h" | "help") show.logo;show-help;exit $?;;
            "last_binary") check.newest_modified_compiled_library;exit $?;;
            "last_source") check.newest_modified_sources;exit $?;;
            "should.recompile") should.recompile_sources;exit $?;;
            *) all $*; exit $?;;
        esac
        shift
    done
fi;
